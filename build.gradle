buildscript {
    repositories {
        maven{ url 'http://maven.aliyun.com/nexus/content/groups/public/'}
    }
}

plugins {
    id "edu.sc.seis.launch4j" version "2.3.0"
}

allprojects {
    repositories {
        maven{ url 'http://maven.aliyun.com/nexus/content/groups/public/'}
    }
}

task createWrapper(type: Wrapper) {
    gradleVersion = "4.0.1"
}


apply plugin: "java"
apply plugin: "maven"

group = "com.github.chimenchen"
version = "0.5.3"

sourceCompatibility = 1.6
targetCompatibility = 1.6

dependencies {
    // to compile Mac specific classes on non-Mac platform
    compileOnly "com.yuvimasory:orange-extensions:1.3.0"
}

sourceSets {
    main
    app {
        compileClasspath += main.compileClasspath + main.output
    }
}

jar {
    from("LICENSE")
    from sourceSets.main.output
}

javadoc {
    options.locale = "en_US"
    options.encoding = "UTF-8"
}

def appMainClass = "org.jchmlib.app.ChmWebApp"

task appJar(type: Jar) {
    group "build"
    baseName = "ChmWeb"

    manifest {
        attributes(
                "Implementation-Title": baseName,
                "Implementation-Version": version,
                "Main-Class": appMainClass)
    }

    from("LICENSE")
    from sourceSets.main.output
    from(sourceSets.app.output)
    from(sourceSets.app.resources)
}

def appName = appJar.baseName
def appJarFile = appJar.outputs.files[0].path
def deployDir = "${buildDir}/deploy"
def runtime = System.getProperty("java.home")

if (System.properties['os.name'].contains("Linux")) {
    for (nativeType in ["image", "rpm", "deb", "installer"]) {
        task "package_${nativeType}"(dependsOn: appJar) {
            group = "distribution"

            def customRuntime = "$rootDir/package/linux/jdk"
            File testFile = new File(customRuntime)
            if (testFile.exists()) {
                runtime = customRuntime
            }

            doLast {
                file(deployDir).mkdirs()
                exec {
                    executable System.getProperty("java.home")+"/../bin/javapackager"
                    args "-deploy", "-title", appName, "-name", appName, "-appclass", appMainClass,
                         "-native", nativeType, "-outdir", deployDir, "-outfile", appName,
                         "-srcfiles", appJarFile, "-Bruntime=$runtime", "-verbose",
                         "-BappVersion=$version", "-Bcopyright=Copyright Â© 2017 chimenchen. All rights reserved.",
                         "-BlicenseType=Apache License 2.0", "-srcfiles", "LICENSE", "-BlicenseFile=LICENSE"
                }
            }
        }
    }
}

// NOTE: need to change Info.plist if version/appName/jdk is changed.
// FIXME: generate Info.plist?
if (System.properties['os.name'].contains("Mac")) {
    for (nativeType in ["image", "dmg", "installer"]) {
        task "package_${nativeType}"(dependsOn: appJar) {
            group = "distribution"

            def customRuntime = "$rootDir/package/macosx/jdk"
            File testFile = new File(customRuntime)
            if (testFile.exists()) {
                runtime = customRuntime
            }

            doLast {
                file(deployDir).mkdirs()
                exec {
                    executable System.getProperty("java.home")+"/../bin/javapackager"
                    args "-deploy", "-title", appName, "-name", appName, "-appclass", appMainClass,
                         "-native", nativeType, "-outdir", deployDir, "-outfile", appName,
                         "-srcfiles", appJarFile, "-BappVersion=$version", "-Bruntime=$runtime", "-verbose"
                }
            }
        }
    }
}

if (System.properties['os.name'].contains("Windows")) {
    for (nativeType in ["image", "exe", "msi", "installer"]) {
        task "package_${nativeType}"(dependsOn: appJar) {
            group = "distribution"

            def customRuntime = "$rootDir/package/windows/jdk"
            File testFile = new File(customRuntime)
            if (testFile.exists()) {
                runtime = customRuntime
            }

            doLast {
                file(deployDir).mkdirs()
                exec {
                    executable System.getProperty("java.home")+"/../bin/javapackager"
                    args "-deploy", "-title", appName, "-name", appName, "-appclass", appMainClass,
                         "-native", nativeType, "-outdir", deployDir, "-outfile", appName,
                         "-srcfiles", appJarFile, "-BappVersion=$version", "-Bruntime=$runtime",
                         "-BmenuHint=true", "-Bwin.menuGroup=$appName", "-BshortcutHint=true",
                         "-BsystemWide=true", "-Bvendor=$appName",
                         "-verbose"
                }
            }
        }
    }
}

launch4j {
  mainClassName = appMainClass
  version = project.version
  icon = "${project.rootDir}/package/windows/${appJar.baseName}.ico"
  jar = appJar.outputs.files[0].path
  copyConfigurable = project.tasks.appJar.outputs.files
  outfile = "${appJar.baseName}-${version}.exe"
  productName = appJar.baseName
  fileDescription = "A web server for viewing CHM files in web browser"
}

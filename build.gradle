buildscript {
    repositories {
        maven{ url 'http://maven.aliyun.com/nexus/content/groups/public/'}
    }
}

plugins {
    id "edu.sc.seis.launch4j" version "2.3.0"
}

allprojects {
    repositories {
        maven{ url 'http://maven.aliyun.com/nexus/content/groups/public/'}
    }
}

apply plugin: "java"

dependencies {
    // to compile Mac specific classes on non-Mac platform
    compileOnly "com.yuvimasory:orange-extensions:1.3.0"
}


version = "0.2"

sourceSets {
    main {
        java { srcDirs = ["src"] }
    }
    app {
        resources { srcDirs = ["resources"] }
    }
}

compileJava {
    options.compilerArgs << "-XDignore.symbol.file=true" << "-Xlint:unchecked" << "-target" << "1.6" << "-source" << "1.6"
    options.fork = true
    options.forkOptions.executable = "javac"
}

def appMainClass = "org.jchmlib.app.ChmWebApp"

task appJar(type: Jar) {
    baseName = "ChmWeb"

    manifest {
        attributes(
                "Implementation-Title": baseName,
                "Implementation-Version": version,
                "Main-Class": appMainClass)
    }

    from("LICENSE")
    from(sourceSets.main.output)
    from(sourceSets.app.resources)
}

task libJar(type: Jar) {
    baseName = "jchmlib"

    manifest {
        attributes(
                "Implementation-Title": "jchmlib",
                "Implementation-Version": version)
    }

    from("LICENSE")
    from(sourceSets.main.output) {
        exclude "org/jchmlib/app/**"
    }
}

jar {
    actions = [] // reset actions
    dependsOn libJar, appJar
}

task deb(dependsOn: appJar) {
    description = "build deb for linux"
    def nativeType = "deb"
    def appName = appJar.baseName
    def jarFile = appJar.outputs.files[0].path
    def deployDir = "${buildDir}/deploy"

    def runtime = System.getProperty("java.home")
    def expectedJdkDir = "$rootDir/package/linux/jdk"

    File testFile = new File(expectedJdkDir);
    if (testFile.exists()) {
        runtime = expectedJdkDir
    }

    file(deployDir).mkdirs()

    doLast {
        exec {
            executable System.getProperty("java.home")+"/../bin/javapackager"
            args "-deploy",
                 "-title", appName,
                 "-name", appName,
                 "-appclass", appMainClass,
                 "-native", nativeType,
                 "-outdir", deployDir,
                 "-outfile", appName,
                 "-srcfiles", jarFile,
                 "-BappVersion=$version",
                 "-Bcopyright=Copyright © 2017 chimenchen. All rights reserved.",
                 "-BlicenseType=Apache License 2.0",
                 "-srcfiles", "LICENSE",
                 "-BlicenseFile=LICENSE",
                 "-Bruntime=$runtime",
                 "-verbose"
    }}
}

task rpm(dependsOn: appJar) {
    description = "build rpm for linux"
    def nativeType = "rpm"
    def appName = appJar.baseName
    def jarFile = appJar.outputs.files[0].path
    def deployDir = "${buildDir}/deploy"

    def runtime = System.getProperty("java.home")
    def expectedJdkDir = "$rootDir/package/linux/jdk"

    File testFile = new File(expectedJdkDir);
    if (testFile.exists()) {
        runtime = expectedJdkDir
    }

    file(deployDir).mkdirs()

    doLast {
        exec {
            executable System.getProperty("java.home")+"/../bin/javapackager"
            args "-deploy",
                 "-title", appName,
                 "-name", appName,
                 "-appclass", appMainClass,
                 "-native", nativeType,
                 "-outdir", deployDir,
                 "-outfile", appName,
                 "-srcfiles", jarFile,
                 "-BappVersion=$version",
                 "-Bcopyright=Copyright © 2017 chimenchen. All rights reserved.",
                 "-BlicenseType=Apache License 2.0",
                 "-srcfiles", "LICENSE",
                 "-BlicenseFile=LICENSE",
                 "-Bruntime=$runtime",
                 "-verbose"
    }}
}


task dmg(dependsOn: appJar) {
    // NOTE: need to change Info.plist if version or appName is changed.
    def appName = appJar.baseName
    def jarFile = appJar.outputs.files[0].path
    def deployDir = "${buildDir}/deploy"

    def runtime = ""
    def expectedJdkDir = "$rootDir/package/macosx/jdk"

    File testFile = new File(expectedJdkDir)
    if (testFile.exists()) {
        // runtime = expectedJdkDir
        runtime = "-Bruntime=$expectedJdkDir"
    }

    file(deployDir).mkdirs()

    doLast { exec {
        executable System.getProperty("java.home")+"/../bin/javapackager"
        args "-deploy",
             "-title", appName,
             "-name", appName,
             "-appclass", appMainClass,
             "-native", "dmg",
             "-outdir", deployDir,
             "-outfile", appName,
             "-srcfiles", jarFile,
             "-BappVersion=$version",
             runtime,
             "-verbose"
    }}
}

launch4j {
  mainClassName = appMainClass
  icon = "${project.rootDir}/package/windows/ChmWeb.ico"
  jar = appJar.outputs.files[0].path
  outfile = appJar.baseName + ".exe"
  productName = appJar.baseName
  version = "0.2"
  fileDescription = "A web server for viewing CHM files in web browser"
}

